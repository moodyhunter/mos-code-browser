<dec f='MOS/kernel/include/mos/mm/paging/paging.h' l='129' type='void mm_unmap_pages(paging_handle_t table, uintptr_t vaddr, size_t npages)'/>
<doc f='MOS/kernel/include/mos/mm/paging/paging.h' l='116'>/**
 * @brief Unmap a block of virtual memory.
 *
 * @param table The page table to unmap from.
 * @param vaddr The virtual address to unmap.
 * @param npages The number of pages to unmap.
 *
 * @details This function unmaps the pages in the block, it does not return the corresponding physical memory
 * back to the allocator.
 *
 * @note Imagine that you have shared memory between address space A and B, then B unmaps the shared memory,
 * the physical memory is still used by A, so it&apos;s not returned to the allocator.
 */</doc>
<use f='MOS/kernel/elf/elf.c' l='225' u='c' c='elf_create_process'/>
<use f='MOS/kernel/mm/cow.c' l='34' u='c' c='copy_cow_pages_inplace'/>
<use f='MOS/kernel/mm/cow.c' l='82' u='c' c='cow_handle_page_fault'/>
<use f='MOS/kernel/mm/memops.c' l='125' u='c' c='mm_unmap_proxy_space'/>
<use f='MOS/kernel/mm/paging/paging.c' l='115' u='c' c='mm_free_pages'/>
<def f='MOS/kernel/mm/paging/paging.c' l='131' ll='135' type='void mm_unmap_pages(paging_handle_t table, uintptr_t vaddr, size_t npages)'/>
